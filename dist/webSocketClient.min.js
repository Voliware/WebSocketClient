if("undefined"==typeof EventSystem)throw new Error("WebSocketClient requires @voliware/eventsystem");class WebSocketClient extends EventSystem{constructor(t){super();let e={ip:"wss://localhost",port:443,autoReconnect:!0,maxReconnectAttempts:0,reconnectIntervalTimer:5e3,id:null};for(let n in e)t.hasOwnProperty(n)&&void 0!==t[n]&&(e[n]=t[n]);return this.ip=t.ip||"wss://localhost",this.port=t.port||443,this.id=t.id||null,this.ws=null,this.lastPingSent=0,this.latency=0,this.reconnectInterval=null,this.reconnectAttempts=0,this.reconnectIntervalTimer=isNaN(t.reconnectIntervalTimer)?1e3:t.maxReconnectAttempts,this.maxReconnectAttempts=isNaN(t.maxReconnectAttempts)?0:t.maxReconnectAttempts,this.autoReconnect=void 0===t.autoReconnect||t.autoReconnect,this}setId(t){return this.id=t,this}connect(){let t=this.ip+":"+this.port;return null!==this.id&&(t+="/?id="+this.id),this.close(),this.ws=new WebSocket(t),this.attachWebSocketHandlers(),this}close(){return this.ws&&this.ws.close(),this.ws=null,this}attachWebSocketHandlers(){let t=this;return this.ws.addEventListener("open",function(e){t.stopAutoReconnect(),t.emit("open",e)}),this.ws.addEventListener("message",function(e){if("/ping"===e.event)t.send("pong");else if("/pong"===e.event)t.recordLatency();else{let n={};try{n=JSON.parse(e.data),t.emit("message",n)}catch(t){console.error(t)}}}),this.ws.addEventListener("error",function(e){t.emit("error",e),t.autoReconnect&&null===t.reconnectInterval&&t.startAutoReconnect()}),this.ws.addEventListener("close",function(e){t.emit("close",e),!e.wasClean&&t.autoReconnect&&null===t.reconnectInterval&&t.startAutoReconnect()}),this}send(t){return this.ws.send(t),this}sendJson(t){return this.send(JSON.stringify(t))}startAutoReconnect(){return this.reconnectAttempts=0,this.reconnectInterval=setInterval(this.reconnect.bind(this),this.reconnectIntervalTimer),this}stopAutoReconnect(){return clearInterval(this.reconnectInterval),this.reconnectInterval=null,this}reconnect(){return!this.maxReconnectAttempts||this.reconnectAttempts<this.maxReconnectAttempts?(this.reconnectAttempts++,this.connect()):this.stopAutoReconnect(),this}ping(){return this.lastPingSent=performance.now(),this.send({event:"/ping"})}pong(){return this.send({event:"/pong"})}recordLatency(){return this.latency=performance.now()-this.lastPingSent,this}}