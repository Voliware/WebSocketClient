class __WebSocketClientEventSystem__{constructor(){this.events={}}generateRandomString(e){let t="",n=()=>{let e=Math.floor(62*Math.random());return e<10?e:e<36?String.fromCharCode(e+55):String.fromCharCode(e+61)};for(;t.length<e;)t+=n();return t}getHandlersCount(e){let t=this.events[e];if(!t)return 0;let n=0,s=[];for(s.push(t);s.length>0;){let e=s.pop();for(let t in e)"handlers"===t?n+=e[t].length:"object"==typeof e[t]&&s.push(e[t])}return n}on(e,t){let n=e.split("."),s=this.events;for(let e=0;e<n.length;e++){let o=n[e];s[o]||(s[o]={}),e===n.length-1?(Array.isArray(s[o].handlers)||(s[o].handlers=[]),s[o].handlers.push(t)):s=s[o]}}one(e,t){let n=this,s=e+"."+this.generateRandomString(16);this.on(s,function(e){t(e),n.off(s)})}off(e,t=!0){let n=e.split("."),s=this.events;for(let e=0;e<n.length;e++){let o=n[e];e===n.length-1?t?delete s[o]:(delete s[o].handlers,0===Object.keys(s[o]).length&&delete s[o]):s=s[o]}}emit(e,t){let n=e.split("."),s=this.events;for(let e=0;e<n.length;e++){if(!(s=s[n[e]]))return this;if(e===n.length-1){let e=[];for(e.push(s);e.length;){let n=e.pop();for(let s in n)if("handlers"===s)for(let e=0;e<n[s].length;e++)n[s][e](t);else e.push(n[s])}}}}}if("undefined"!=typeof module&&(module.exports=__WebSocketClientEventSystem__),void 0===__WebSocketClientEventSystem__)throw new Error("WebSocketClient requires __WebSocketClientEventSystem__");class WebSocketClient extends __WebSocketClientEventSystem__{constructor({url:e="ws://localhost",auto_reconnect:t=!0,max_reconnect_attempts:n=0,reconnect_interval_timer:s=1e3,binary_type:o="blob"}){super(),this.url=e,this.websocket=null,this.binary_type=o,this.reconnect_interval=null,this.reconnect_attempts=0,this.reconnect_interval_timer=s,this.max_reconnect_attempts=n,this.auto_reconnect=t,this.was_closed_on_purpose=!1;let r="https:"===window.location.protocol,i=this.url.split(":");r&&"wss"!==i[0]&&(i[0]="wss",this.url=i.join(":"))}getReadyState(){return this.websocket?this.websocket.readyState:WebSocket.CLOSED}getIsConnected(){return this.getReadyState()===WebSocket.OPEN}connect(){this.close(),this.websocket=new WebSocket(this.url),this.websocket.binary_type=this.binary_type,this.attachWebSocketHandlers()}disconnect(){this.close()}close(){this.websocket&&(this.was_closed_on_purpose=!0,this.websocket.close()),this.websocket=null}attachWebSocketHandlers(){this.websocket.addEventListener("open",e=>{this.handleOpenEvent(e)}),this.websocket.addEventListener("message",e=>{this.handleMessageEvent(e)}),this.websocket.addEventListener("error",e=>{this.handleErrorEvent(e)}),this.websocket.addEventListener("close",e=>{this.handleCloseEvent(e)})}handleOpenEvent(e){this.stopAutoReconnect(),this.emit("open",e)}handleMessageEvent(e){this.emit("message",e)}handleErrorEvent(e){this.emit("error",e),this.auto_reconnect&&null===this.reconnect_interval&&this.startAutoReconnect()}handleCloseEvent(e){this.emit("close",e),this.was_closed_on_purpose||e.wasClean||!this.auto_reconnect||null!==this.reconnect_interval||this.startAutoReconnect(),this.was_closed_on_purpose=!1}send(e){this.websocket.send(e)}sendJson(e){this.send(JSON.stringify(e))}startAutoReconnect(){this.reconnect_attempts=0,this.reconnect_interval=setInterval(this.reconnect.bind(this),this.reconnect_interval_timer)}stopAutoReconnect(){clearInterval(this.reconnect_interval),this.reconnect_interval=null}reconnect(){!this.max_reconnect_attempts||this.reconnect_attempts<this.max_reconnect_attempts?(this.reconnect_attempts++,this.connect()):this.stopAutoReconnect()}}WebSocketClient.status={disconnected:0,connected:1,error:2,connecting:3,string:["Disconnected","Connected","Error","Connecting"]};